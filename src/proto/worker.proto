syntax = "proto3";

package worker;

service WorkerService {
    // Master call StartTask -> workers when all workers are ready 
    // Workers load Graph data, then call Barrier(0) -> Master
    // Main Body of the Graph Algorithm runs here
    
    rpc StartTask (StartRequest) returns (StartReply) {}    

    // Worker Call PullModel -> each other to sync graph parameter
    // if timeout, try next peer
    // call Barrier(this round) -> Master when done all Pulling
    // if a peer recovers from failure, rePull
    rpc PullModel (PullRequest) returns (PullReply) {}

    // Master call InformNewPeer -> existing workers when a new worker calls Register -> Master 
    // Old workers must connect to the new peer
    rpc InformNewPeer (InformRequest) returns (InformReply) {}
}

message StartRequest {
    // vertex partition of workers (sequential), map: workeraddr -> first vertex number
    map<string, int32> VertexPartition = 1;
    // Name of Graph data file
    string GraphName = 2;
}

message StartReply {
    enum PartitionStatus {
        OK = 0;
        ERRNODATA = 1;  // worker can't find corresponding data on local machine
    }
    PartitionStatus status = 1;
}

message PullRequest {
    // who is Pulling 
    string WorkerAddr = 1;
    // Round Number of Graph Parameter being Pulled
    int32 RountNo = 2;
    // content of the model
}

message PullReply {
    enum PullStatus {
        OK = 0;
        // Wrong Number Pulled
        ERRWRONGRD = 1;
    }
    PullStatus status = 1;
    map<int32, float> model = 2;
    // optional Correct Round Number, if status == ERRWRONGRD
    //optional int32 CorrectRoundNo = 2;
}

message InformRequest {
	string WorkerAddr = 1;
}

message InformReply {
    enum InformStatus {
        OK = 0;
        // Wrong Number Pulled
        ERRWRONGRD = 1;
    }
    InformStatus status = 1;	
}